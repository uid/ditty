{
  "my-code" : {
    "id" : "my-code",
    "representations" : [{ "template" : "My Code" }],
    "meaning" : []
  },
  "debug" : {
    "id" : "debug",
    "representations" : [{ "template" : "debug" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { alert(\"debug!\"); c() })",
        "arguments" : {}
      }
    }
  },
  "alert" : {
    "id" : "alert",
    "representations" : [
      { "template" : "Show a popup that displays [message]." },
      { "template" : "Display popup: [message]." },
      { "template" : "alert([message])" }
    ],
    "arguments" : [{ "name" : "message" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { evalArgs(function(eargs) { alert(eargs[\"message\"].stringValue()); c() }, e, os, args, [\"message\"]) })",
        "arguments" : { "message" : { "reference" : { "name" : "message" } } }
      }
    }
  },
  "play" : {
    "id" : "play",
    "representations" : [
      { "template" : "Play [note]." }
    ],
    "arguments" : [{ "name" : "note" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { evalArgs(function(eargs) { os.globals[\"xylo\"].strike(eargs[\"note\"].numberValue()); c() }, e, os, args, [\"note\"]) })",
        "arguments" : { "note" : { "reference" : { "name" : "note" } } }
      }
    }
  },
  "after-seconds" : {
    "id" : "after-seconds",
    "representations" : [
      { "template" : "After [seconds] seconds, [action]." },
      { "template" : "after([seconds]) {<br />[action]<br />}", "style" : "block" }
    ],
    "arguments" : [{ "name" : "seconds" }, { "name" : "action" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" :
          "(function(c, e, os, args) { args[\"seconds\"].evaluate(function(sec) { setTimeout(function() { args[\"action\"].evaluate(c, e, os) }, sec.numberValue() * 1000) }, e, os) })",
        "arguments" : {
          "seconds" : { "reference" : { "name" : "seconds" } },
          "action" : { "reference" : { "name" : "action" } }
        }
      }
    }
  },
  "wait-seconds" : {
    "id" : "wait-seconds",
    "representations" : [
      { "template" : "Wait [seconds] seconds." }
    ],
    "arguments" : [{ "name" : "seconds" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" :
          "(function(c, e, os, args) { args[\"seconds\"].evaluate(function(sec) { setTimeout(function() { c() }, sec.numberValue() * 1000) }, e, os) })",
        "arguments" : {
          "seconds" : { "reference" : { "name" : "seconds" } }
        }
      }
    }
  },
  "after-beats" : {
    "id" : "after-beats",
    "representations" : [
      { "template" : "After [count] beats, [action]." }
    ],
    "arguments" : [{ "name" : "count" }, { "name" : "action" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" :
          "(function(c, e, os, args) { args[\"count\"].evaluate(function(count) { setTimeout(function() { args[\"action\"].evaluate(c, e, os) }, count.numberValue() * 500) }, e, os) })",
        "arguments" : {
          "count" : { "reference" : { "name" : "count" } },
          "action" : { "reference" : { "name" : "action" } }
        }
      }
    }
  },
  "prompt" : {
    "id" : "prompt",
    "show" : false,
    "representations" : [
      { "template" : "user's response to [question]" },
      { "template" : "Ask [question]" },
      { "template" : "prompt([question])" }
    ],
    "arguments" : [{ "name" : "question" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(os, args) { return new StringMeaning(prompt(args[\"question\"].evaluate(os).stringValue()) || \"\") })",
        "arguments" : { "question" : { "reference" : { "name" : "question" } } }
      }
    }
  },
  "loop" : {
    "id" : "loop",
    "representations" : [
      { "template" : "loop {<br />[actions]<br />}", "style" : "block" },
      { "template" : "[actions] forever." }
    ],
    "arguments" : [{ "name" : "actions", "type" : "instructions" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { var recur = function() { evalArgs(function() { setTimeout(recur, 1) }, function(ex) { if(ex instanceof InternalException && ex.type == \"loop-breaker\") { c() } else { e(ex) } }, os, args, [\"actions\"]) }; recur() })",
        "arguments" : { "actions" : { "reference" : { "name" : "actions" } } }
      }
    }
  },
  "loop-breaker" : {
    "id" : "loop-breaker",
    "representations" : [
      { "template" : "loop break exception" }
    ],
    "arguments" : [],
    "meaning" : {
      "invocation" : {
        "pattern" : "exception",
        "arguments" : {
          "name" : {
            "native_invocation" : {
              "implementation" : "(function(c, e, os, args) { c(new StringMeaning(\"loop-breaker\")) })",
              "arguments" : {}
            }
          }
        }
      }
    }
  },
  "exception" : {
    "id" : "exception",
    "representations" : [
      { "template" : "exception&lt;[name]&gt;" }
    ],
    "arguments" : [{ "name" : "name" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { evalArgs(function(eargs) { c(new ExceptionMeaning(eargs[\"name\"].stringValue())) }, e, os, args, [\"name\"]) })",
        "arguments" : { "name" : { "reference" : { "name" : "name" } } }
      }
    }
  },
  "break" : {
    "id" : "break",
    "representations" : [
      { "template" : "Stop looping." },
      { "template" : "stop looping" },
      { "template" : "Break out of the loop." },
      { "template" : "break out of the loop" },
      { "template" : "break" }
    ],
    "arguments" : [],
    "meaning" : {
      "invocation" : {
        "pattern" : "throw",
        "arguments" : {
          "exception" : {
            "invocation" : {
              "pattern" : "loop-breaker",
              "arguments" : {}
            }
          }
        }
      }
    }
  },
  "throw" : {
    "id" : "throw",
    "representations" : [
      { "template" : "throw [exception]" }
    ],
    "arguments" : [{ "name" : "exception" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { evalArgs(function(eargs) { e(eargs[\"exception\"].exceptionValue()) }, e, os, args, [\"exception\"]) })",
        "arguments" : {
          "exception" : { "reference" : { "name" : "exception" } }
        }
      }
    }
  },
  "catch" : {
    "id" : "catch",
    "show" : false,
    "representations" : [
      { "template" : "Catch [exception] from [action]" }
    ],
    "arguments" : [{ "name" : "exception" }, { "name" : "action" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(os, args) { try { args[\"action\"].evaluate(os) } catch(e) { if(e instanceof InternalException && e.type == args[\"exception\"].evaluate(os).exceptionValue().type) { } else { throw e } } })",
        "arguments" : {
          "exception" : { "reference" : { "name" : "exception" } },
          "action" : { "reference" : { "name" : "action" } }
        }
      }
    }
  },
  "if" : {
    "id" : "if",
    "representations" : [
      { "template" : "if([condition]) {<br />[actions]<br />}", "style" : "block" },
      { "template" : "If [condition], [actions]." }
    ],
    "arguments" : [{ "name" : "condition" }, { "name" : "actions", "type" : "instructions" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { evalArgs(function(eargs) { if(eargs[\"condition\"].boolValue()) evalArgs(c, e, os, args, [\"actions\"]); else c() }, e, os, args, [\"condition\"]) })",
        "arguments" : {
          "condition" : { "reference" : { "name" : "condition" } },
          "actions" : { "reference" : { "name" : "actions" } }
        }
      }
    }
  },
  "logical-and" : {
    "id" : "logical-and",
    "show" : false,
    "representations" : [
      { "template" : "[value 1] and [value 2]" },
      { "template" : "[value 1] &amp;&amp; [value 2]" }
    ],
    "arguments" : [{ "name" : "value 1" }, { "name" : "value 2" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(os, args) { return new BoolMeaning(args[\"value 1\"].evaluate(os).boolValue() && args[\"value 2\"].evaluate().boolValue(os)) })",
        "arguments" : {
          "value 1" : { "reference" : { "name" : "value 1" } },
          "value 2" : { "reference" : { "name" : "value 2" } }
        }
      }
    }
  },
  "logical-or" : {
    "id" : "logical-or",
    "show" : false,
    "representations" : [
      { "template" : "[value 1] or [value 2]" },
      { "template" : "[value 1] || [value 2]" }
    ],
    "arguments" : [{ "name" : "value 1" }, { "name" : "value 2" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(os, args) { return new BoolMeaning(args[\"value 1\"].evaluate(os).boolValue() || args[\"value 2\"].evaluate(os).boolValue()) })",
        "arguments" : {
          "value 1" : { "reference" : { "name" : "value 1" } },
          "value 2" : { "reference" : { "name" : "value 2" } }
        }
      }
    }
  },
  "is-true" : {
    "id" : "is-true",
    "show" : false,
    "representations" : [
      { "template" : "[value] is true" }
    ],
    "arguments" : [{ "name" : "value" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(os, args) { return new BoolMeaning(args[\"value\"].evaluate(os).boolValue()) })",
        "arguments" : { "value" : { "reference" : { "name" : "value" } } }
      }
    }
  },
  "is-false" : {
    "id" : "is-false",
    "representations" : [
      { "template" : "[value] is false" },
      { "template" : "![value]" },
      { "template" : "not [value]" }
    ],
    "arguments" : [{ "name" : "value" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { evalArgs(function(eargs) { c(new BoolMeaning(!eargs[\"value\"].boolValue())) }, e, os, args, [\"value\"]) })",
        "arguments" : { "value" : { "reference" : { "name" : "value" } } }
      }
    }
  },
  "note-do" : { "id" : "note-do", "representations" : [ { "template" : "Do" } ], "arguments" : [], "meaning" : { "native_invocation" : { "implementation" : "(function(c, e, os, args) { c(new NumberMeaning(mtof(65))) })", "arguments" : {} } } },
  "note-re" : { "id" : "note-re", "representations" : [ { "template" : "Re" } ], "arguments" : [], "meaning" : { "native_invocation" : { "implementation" : "(function(c, e, os, args) { c(new NumberMeaning(mtof(67))) })", "arguments" : {} } } },
  "note-mi" : { "id" : "note-mi", "representations" : [ { "template" : "Mi" } ], "arguments" : [], "meaning" : { "native_invocation" : { "implementation" : "(function(c, e, os, args) { c(new NumberMeaning(mtof(69))) })", "arguments" : {} } } },
  "true" : {
    "id" : "true",
    "representations" : [
      { "template" : "true" }
    ],
    "arguments" : [],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { c(new BoolMeaning(true)) })",
        "arguments" : {}
      }
    }
  },
  "false" : {
    "id" : "false",
    "representations" : [
      { "template" : "false" }
    ],
    "arguments" : [],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { c(new BoolMeaning(false)) })",
        "arguments" : {}
      }
    }
  },
  "maybe" : {
    "id" : "maybe",
    "representations" : [
      { "template" : "maybe" }
    ],
    "arguments" : [],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { c(new BoolMeaning(Math.random() > 0.5)) })",
        "arguments" : {}
      }
    }
  },
  "save-var" : {
    "id" : "save-var",
    "representations" : [
      { "template" : "Call [action] &ldquo;[variable name]&rdquo;." },
      { "template" : "[action], calling it &ldquo;[variable name]&rdquo;." },
      { "template" : "var [variable name] = [action]" }
    ],
    "arguments" : [{ "name" : "action" }, { "name" : "variable name" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { evalArgs(function(eargs) { os.globals[eargs[\"variable name\"].stringValue(e)] = eargs[\"action\"]; c() }, e, os, args, [\"variable name\", \"action\"]) })",
        "arguments" : {
          "action" : { "reference" : { "name" : "action" } },
          "variable name" : { "reference" : { "name" : "variable name" } }
        }
      }
    }
  },
  "get-var" : {
    "id" : "get-var",
    "representations" : [
      { "template" : "the value of [variable name]" },
      { "template" : "[variable name]" }
    ],
    "arguments" : [{ "name" : "variable name" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(c, e, os, args) { evalArgs(function(eargs) { c(os.globals[eargs[\"variable name\"].stringValue(e)]) }, e, os, args, [\"variable name\"]) })",
        "arguments" : {
          "variable name" : { "reference" : { "name" : "variable name" } }
        }
      }
    }
  },
  "concat" : {
    "id" : "concat",
    "show" : false,
    "representations" : [
      { "template" : "[text 1] + [text 2]" },
      { "template" : "[text 1][text 2]" }
    ],
    "arguments" : [{ "name" : "text 1" }, { "name" : "text 2" }],
    "meaning" : {
      "native_invocation" : {
        "implementation" : "(function(os, args) { return new StringMeaning(args[\"text 1\"].evaluate(os).stringValue() + args[\"text 2\"].evaluate(os).stringValue()) })",
        "arguments" : {
          "text 1": { "reference" : { "name" : "text 1" } },
          "text 2": { "reference" : { "name" : "text 2" } }
        }
      }
    }
  },
  "concat-3" : {
    "id" : "concat-3",
    "show" : false,
    "representations" : [
      { "template" : "[text 1] + [text 2] + [text 3]" },
      { "template" : "[text 1][text 2][text 3]" }
    ],
    "arguments" : [{ "name" : "text 1" }, { "name" : "text 2" }, { "name" : "text 3" }],
    "meaning" : {
      "invocation" : {
        "pattern" : "concat",
        "arguments" : {
          "text 1" : { "reference" : { "name" : "text 1" } },
          "text 2" : {
            "invocation" : {
              "pattern" : "concat",
              "arguments" : {
                "text 1": { "reference" : { "name" : "text 2" } },
                "text 2": { "reference" : { "name" : "text 3" } }
              }
            }
          }
        }
      }
    }
  },
  "while" : {
    "id" : "while",
    "representations" : [
      { "template" : "while([condition]) {<br />[actions]<br />}", "style" : "block" },
      { "template" : "While [condition], [actions]." },
      { "template" : "So long as [condition], [actions]." },
      { "template" : "[actions] so long as [condition]." }
    ],
    "arguments" : [{ "name" : "condition" }, { "name" : "actions", "type" : "instructions" }],
    "meaning" : {
      "invocation" : {
        "pattern" : "loop",
        "arguments" : {
          "actions" : [
            {
              "invocation" : {
                "pattern" : "if",
                "arguments" : {
                  "condition" : { "invocation" : { "pattern" : "is-false", "arguments" : { "value" : { "reference" : { "name" : "condition" } } } } },
                  "actions" : { "invocation" : { "pattern" : "break" } }
                }
              }
            },
            { "reference" : { "name" : "actions" } }
          ]
        }
      }
    }
  },
  "maybe-block" : {
    "id" : "maybe-block",
    "representations" : [
      { "template" : "Maybe [actions]." }
    ],
    "arguments" : [{ "name" : "actions", "type" : "instructions" }],
    "meaning" : {
      "invocation" : {
        "pattern" : "if",
        "arguments" : {
          "condition" : { "invocation" : { "pattern" : "maybe", "arguments" : {} } },
          "actions" : { "reference" : { "name" : "actions" } }
        }
      }
    }
  },
  "until" : {
    "id" : "until",
    "show" : false,
    "representations" : [
      { "template" : "Until [stop condition], [actions]." },
      { "template" : "until([stop condition]) {<br />[actions]<br />}", "style" : "block" }
    ],
    "arguments" : [{ "name" : "stop condition" }, { "name" : "actions", "type" : "instructions" }],
    "meaning" : {
      "invocation" : {
        "pattern" : "loop",
        "arguments" : {
          "action" : [
            {
              "invocation" : {
                "pattern" : "if",
                "arguments" : {
                  "condition" : { "reference" : { "name" : "condition" } },
                  "action" : { "invocation" : { "pattern" : "break" } }
                }
              }
            },
            { "reference" : { "name" : "actions" } }
          ]
        }
      }
    }
  }
}
